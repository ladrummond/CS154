function [x,iter]= mitermeth(A,b,x0,nmax,tol,P,w) % ITERMETH General iterative method% X = ITERMETH(A,B,X0,NMAX,TOL,P) attempts to solve the % system of linear equations A*X=B for X. The N-by-N% coefficient matrix A must be non-singular and the% right hand side column vector B must have length% N. If P=’J’ the Jacobi method is used, if P=’G’ the% Gauss-Seidel method is selected. Otherwise, P is a% N-by-N matrix that plays the role of a preconditioner % for the gradient method, which is a dynamic[n,n]=size(A);if ischar(P)==1   if P=='J'     L=diag(diag(A)); U=eye(n); alpha=1;    elseif P == 'G' || P == 'S'     L=tril(A); U=eye(n); alpha=1;    endifendifiter=0; x=x0; r=b-A*x0; r0=norm(r); err=r0; while err > tol && iter < nmax  z=L\r;   z=U\z;  iter=iter+1;   if P =='S'    x1 = x;  endif  x = x + alpha*z;  if P =='S'    x = x1 + w*(x - x1);  endif  r = b - A * x;  err = norm (r) / r0;  printf("[iter=%d] The current error is %e\n",iter, err);endwhile